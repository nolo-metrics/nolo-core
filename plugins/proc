#!/bin/sh
# proc - process monitoring in nolo format

# deeply inspired by https://github.com/munin-monitoring/munin/blob/master/plugins/node.d/processes.in
#
# Extract current load average from uptime (which is not in POSIX)
#
# Linux:
#   10:32:35 up 11:21,  1 user,  load average: 0.00, 0.01, 0.05
# FreeBSD:
#   10:32AM  up 40 mins, 1 user, load averages: 0.59, 0.38, 0.29
# SunOS:
#   10:33:35    up 41 min(s),  1 user,  load average: 0.00, 0.00, 0.00
# Darwin:
#    2:34  up 21 days, 14:54, 1 user, load averages: 1.23 1.25 1.25
echo load `uptime | sed -e 's/^.*load averages*: \([^ ,]*\).*$/\1/'`

# Using POSIX flags for ps, we can extract process
# state from the following systems:
#
# Linux:    D  uninterruptible
#           R  runnable
#           S  sleeping
#           T  stopped
#           W  paging aka waiting
#           X  dead
#           Z  zombie
#
# SunOS:    O  running
#           R  runnable
#           S  sleeping
#           T  stopped
#           W  waiting
#           Z  zombie
#
# FreeBSD:  D  uninterruptible
#           I  idle
#           L  lock
#           R  runnable
#           S  sleeping
#           T  stopped
#           W  interrupt aka waiting
#           Z  zombie
#
# Darwin:   I  idle
#           R  runnable
#           T  stopped
#           U  uninterruptible
#           Z  zombie

# request all procs, only print state field, empty header
ps -Ao state= |
# Reduce to a single state char
cut -c1 |
awk '
{ total++; stat[$1]++ }
END {
  print "total "           int(total)
  print "dead "            int(stat["X"])
  print "idle "            int(stat["I"])
  print "lock "            int(stat["L"])
  print "runnable "        int(stat["R"])
  print "running "         int(stat["O"])
  print "sleeping "        int(stat["S"])
  print "stopped "         int(stat["T"])
  print "uninterruptible " int(stat["D"]) + int(stat["U"])
  print "waiting "         int(stat["W"])
  print "zombie "          int(stat["Z"])
}'
